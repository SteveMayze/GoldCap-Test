
GoldCapADCVerification.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800040  00800040  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c9  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c1  00000000  00000000  00000901  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000339  00000000  00000000  00000ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000011fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000355  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019a  00000000  00000000  000015c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000175f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 27       	eor	r17, r17
  24:	1f bf       	out	0x3f, r17	; 63
  26:	cf eb       	ldi	r28, 0xBF	; 191
  28:	d0 e0       	ldi	r29, 0x00	; 0
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	45 d0       	rcall	.+138    	; 0xba <main>
  30:	81 c0       	rjmp	.+258    	; 0x134 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <delay_ms>:
 *	This wrapper enables the ms count to be passed in as variable
 *	and not as a integer constant as dictated by the _delay_ms 
 *	function.
 */
void delay_ms(uint16_t ms){
	for(int i =0; i < ms; i++){
  34:	81 17       	cp	r24, r17
  36:	91 07       	cpc	r25, r17
  38:	71 f0       	breq	.+28     	; 0x56 <__SREG__+0x17>
  3a:	40 e0       	ldi	r20, 0x00	; 0
  3c:	50 e0       	ldi	r21, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  3e:	69 ef       	ldi	r22, 0xF9	; 249
  40:	70 e0       	ldi	r23, 0x00	; 0
  42:	61 50       	subi	r22, 0x01	; 1
  44:	70 40       	sbci	r23, 0x00	; 0
  46:	e9 f7       	brne	.-6      	; 0x42 <__SREG__+0x3>
  48:	00 c0       	rjmp	.+0      	; 0x4a <__SREG__+0xb>
  4a:	00 00       	nop
  4c:	4f 5f       	subi	r20, 0xFF	; 255
  4e:	5f 4f       	sbci	r21, 0xFF	; 255
  50:	48 17       	cp	r20, r24
  52:	59 07       	cpc	r21, r25
  54:	a1 f7       	brne	.-24     	; 0x3e <__SP_H__>
  56:	08 95       	ret

00000058 <adc_init>:


void adc_init() {
	// ADMUX &= ~( 1 << REFS ); // Set the reference voltage to be Vcc
	// ADCSRB &= ~(1 << ADLAR );
	ADCSRA |= ( 1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0 ); // ADC Enable Bit = Ensure it is enabled
  58:	42 b3       	in	r20, 0x12	; 18
  5a:	47 68       	ori	r20, 0x87	; 135
  5c:	42 bb       	out	0x12, r20	; 18
  5e:	08 95       	ret

00000060 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111; // AND operation with 7
	ADMUX |= ch;
  60:	40 b3       	in	r20, 0x10	; 16
  62:	87 70       	andi	r24, 0x07	; 7
  64:	84 2b       	or	r24, r20
  66:	80 bb       	out	0x10, r24	; 16
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= ( 1<<ADSC );
  68:	96 9a       	sbi	0x12, 6	; 18
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while( ADCSRA & (1<<ADSC));
  6a:	96 99       	sbic	0x12, 6	; 18
  6c:	fe cf       	rjmp	.-4      	; 0x6a <adc_read+0xa>
	return (ADC);
  6e:	8e b1       	in	r24, 0x0e	; 14
  70:	9f b1       	in	r25, 0x0f	; 15
}
  72:	08 95       	ret

00000074 <make_bar>:


uint8_t make_bar( uint16_t value ) {
		uint8_t bar  = 0x00;
  74:	41 e0       	ldi	r20, 0x01	; 1
  76:	81 17       	cp	r24, r17
  78:	91 07       	cpc	r25, r17
  7a:	09 f4       	brne	.+2      	; 0x7e <make_bar+0xa>
  7c:	40 e0       	ldi	r20, 0x00	; 0
		if( value > 0 ) {
			bar |= ( 1 << 0 );
		}
		if (value > 150 ) {
  7e:	87 39       	cpi	r24, 0x97	; 151
  80:	91 07       	cpc	r25, r17
  82:	08 f0       	brcs	.+2      	; 0x86 <make_bar+0x12>
			bar |= ( 1 << 1 );
  84:	42 60       	ori	r20, 0x02	; 2
		}
		if (value > 300 ) {
  86:	8d 32       	cpi	r24, 0x2D	; 45
  88:	51 e0       	ldi	r21, 0x01	; 1
  8a:	95 07       	cpc	r25, r21
  8c:	08 f0       	brcs	.+2      	; 0x90 <make_bar+0x1c>
			bar |= ( 1 << 2 );
  8e:	44 60       	ori	r20, 0x04	; 4
		}
		if (value > 450 ) {
  90:	83 3c       	cpi	r24, 0xC3	; 195
  92:	51 e0       	ldi	r21, 0x01	; 1
  94:	95 07       	cpc	r25, r21
  96:	08 f0       	brcs	.+2      	; 0x9a <make_bar+0x26>
			bar |= ( 1 << 3 );
  98:	48 60       	ori	r20, 0x08	; 8
		}
		if (value > 600 ) {
  9a:	89 35       	cpi	r24, 0x59	; 89
  9c:	52 e0       	ldi	r21, 0x02	; 2
  9e:	95 07       	cpc	r25, r21
  a0:	08 f0       	brcs	.+2      	; 0xa4 <make_bar+0x30>
			bar |= ( 1 << 4 );
  a2:	40 61       	ori	r20, 0x10	; 16
		}
		if (value > 750 ) {
  a4:	8f 3e       	cpi	r24, 0xEF	; 239
  a6:	52 e0       	ldi	r21, 0x02	; 2
  a8:	95 07       	cpc	r25, r21
  aa:	08 f0       	brcs	.+2      	; 0xae <make_bar+0x3a>
			bar |= ( 1 << 5 );
  ac:	40 62       	ori	r20, 0x20	; 32
		}
		if (value > 900 ) {
  ae:	85 38       	cpi	r24, 0x85	; 133
  b0:	93 40       	sbci	r25, 0x03	; 3
  b2:	08 f0       	brcs	.+2      	; 0xb6 <make_bar+0x42>
			bar |= ( 1 << 6 );
  b4:	40 64       	ori	r20, 0x40	; 64
		}
		return bar;
}
  b6:	84 2f       	mov	r24, r20
  b8:	08 95       	ret

000000ba <main>:

int main(void)
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	00 d0       	rcall	.+0      	; 0xc0 <__stack+0x1>
  c0:	1f 93       	push	r17
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
	PB1 TPI Data
	PB2 LED_PB2 (8)
	PB3 ~RESET

	*/
	DDRA = 0x00;
  c6:	11 b9       	out	0x01, r17	; 1
	DDRA |= ( 0x7F << PORTA0 );
  c8:	41 b1       	in	r20, 0x01	; 1
  ca:	4f 67       	ori	r20, 0x7F	; 127
  cc:	41 b9       	out	0x01, r20	; 1
	DDRA |= ( 0x00 << PORTA7 ); // Set port A7 as Input
  ce:	41 b1       	in	r20, 0x01	; 1
  d0:	41 b9       	out	0x01, r20	; 1
	DDRB |= ( 1 << PORTB2);
  d2:	2a 9a       	sbi	0x05, 2	; 5

	adc_init();
  d4:	c1 df       	rcall	.-126    	; 0x58 <adc_init>

	volatile uint8_t leds = 0x7F;
  d6:	4f e7       	ldi	r20, 0x7F	; 127
  d8:	cf 5f       	subi	r28, 0xFF	; 255
  da:	df 4f       	sbci	r29, 0xFF	; 255
  dc:	48 83       	st	Y, r20
  de:	c1 50       	subi	r28, 0x01	; 1
  e0:	d0 40       	sbci	r29, 0x00	; 0
	bool blinker = false;
  e2:	30 e0       	ldi	r19, 0x00	; 0

	while (1)
	{
		uint16_t adc_in = adc_read(0x07) ;
  e4:	87 e0       	ldi	r24, 0x07	; 7
  e6:	bc df       	rcall	.-136    	; 0x60 <adc_read>
  e8:	cd 5f       	subi	r28, 0xFD	; 253
  ea:	df 4f       	sbci	r29, 0xFF	; 255
  ec:	98 83       	st	Y, r25
  ee:	8a 93       	st	-Y, r24
  f0:	c2 50       	subi	r28, 0x02	; 2
  f2:	d0 40       	sbci	r29, 0x00	; 0
		leds = make_bar( adc_in );
  f4:	bf df       	rcall	.-130    	; 0x74 <make_bar>
  f6:	cf 5f       	subi	r28, 0xFF	; 255
  f8:	df 4f       	sbci	r29, 0xFF	; 255
  fa:	88 83       	st	Y, r24
  fc:	c1 50       	subi	r28, 0x01	; 1
  fe:	d0 40       	sbci	r29, 0x00	; 0

		PORTA &= ~( 0x7F << PORTA0 );
 100:	42 b1       	in	r20, 0x02	; 2
 102:	40 78       	andi	r20, 0x80	; 128
 104:	42 b9       	out	0x02, r20	; 2
		PORTA |= leds;
 106:	cf 5f       	subi	r28, 0xFF	; 255
 108:	df 4f       	sbci	r29, 0xFF	; 255
 10a:	58 81       	ld	r21, Y
 10c:	c1 50       	subi	r28, 0x01	; 1
 10e:	d0 40       	sbci	r29, 0x00	; 0
 110:	42 b1       	in	r20, 0x02	; 2
 112:	45 2b       	or	r20, r21
 114:	42 b9       	out	0x02, r20	; 2

		if (blinker){
 116:	33 23       	and	r19, r19
 118:	11 f0       	breq	.+4      	; 0x11e <__DATA_REGION_LENGTH__+0x1e>
			PORTB |= ( 1 << PORTB2 );
 11a:	32 9a       	sbi	0x06, 2	; 6
 11c:	01 c0       	rjmp	.+2      	; 0x120 <__DATA_REGION_LENGTH__+0x20>
		} else {
			PORTB &= ~( 1 << PORTB2 );
 11e:	32 98       	cbi	0x06, 2	; 6
		}
		blinker ^= true;
 120:	41 e0       	ldi	r20, 0x01	; 1
 122:	34 27       	eor	r19, r20
		delay_ms(adc_in);
 124:	ce 5f       	subi	r28, 0xFE	; 254
 126:	df 4f       	sbci	r29, 0xFF	; 255
 128:	89 91       	ld	r24, Y+
 12a:	98 81       	ld	r25, Y
 12c:	c3 50       	subi	r28, 0x03	; 3
 12e:	d0 40       	sbci	r29, 0x00	; 0
 130:	81 df       	rcall	.-254    	; 0x34 <delay_ms>

	}
 132:	d8 cf       	rjmp	.-80     	; 0xe4 <__stack+0x25>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
